#!/usr/bin/env node

/**
 * Module dependencies.
 */

const mongoose = require("mongoose");
//const redis = require("redis");

var { app } = require("../main");
var debug = require("debug")("pcservice:server");
var http = require("http");
//const { redisClient } = require("../server/utils");

/**
 * Get port from environment and store in Express.
 */
var server;

const mongodbUrl = process.env.MONGODB_URL;
console.log(mongodbUrl);
//console.log(process.env.REDIS_HOST);

var port = normalizePort(process.env.PORT || "8086");
app.set("port", port);

/**
 * Connect to mongo db then Create HTTP server.
 */
mongoose
  .connect(mongodbUrl, { useNewUrlParser: true, useUnifiedTopology: true })
  .then((result) => {
    server = http.createServer(app);

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  })
  .catch((err) => console.log(err));

//connect to redis

//redisClient.on("error", (error) => console.error(`Error : ${error}`));

/*redisClient
  .connect()
  .then(() => {
    console.log("Redis connected alr");
  })
  .catch((err) => console.log(err));*/

/**
 * Normalize a port into a number, string, or false.
 */

//all functions here
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log("connected");
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
